import telebot
import multiprocessing
import schedule
import config
import time

import logging

import datetime
import mongoengine

from dbinstances import User_stud, Question
from random import randint, seed


logger = telebot.logger
telebot.logger.setLevel(logging.INFO)

bot = telebot.TeleBot(config.TOKEN)

mongoengine.connect(
    db=config.DB_NAME,
    username=config.DB_USER,
    password=config.DB_PASS,
    host=config.DB_HOST,
    port=27017
)


def generate_r2d2():
    #seed(datetime.now())
    return f"R{randint(0, 100)}-D{randint(0, 100)}"


def message_send_readiness():
    """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    """
    for stud in User_stud.objects():
        if stud.user_status == "stop":
            stud.user_status = "ready"
            stud = send_single_conf(stud)
            stud.save()


def message_end(user, call):
    bot.send_message(user.user_id, text="–¢–æ–≥–¥–∞ –¥–æ –∑–∞–≤—Ç—Ä–∞! –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! ü¶Ñ \n" 
                                        "–ë—É–¥—É –∂–¥–∞—Ç—å —Ç–µ–±—è üôÑ")
    user.user_status = "stop"
    user.save()

def button_makeup(button):
    """
        –ö–Ω–æ–ø–∫–∏ –≤ —Å—Ç–æ–ª–±–∏–∫–∏
    """

    markup = telebot.types.InlineKeyboardMarkup()

    for text_btn, text2_btn in zip(button[::2], button[1::2]):
        markup.add(
            telebot.types.InlineKeyboardButton(text=text_btn, callback_data=text_btn),
            telebot.types.InlineKeyboardButton(text=text2_btn, callback_data=text2_btn)
        )

    return markup


def send_questions(user):
    """
        –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Å–ª–æ–≤–∞ –∏ –≤–æ–∑–º–æ–∂–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥)
    """

    bot.send_message(user.user_id, text="–ü—Ä–∏—Å—Ç—É–ø–∏–º!")
    arr_number_questions = 1  # randint(0, config.COUNT_QUE)
    question = Question.objects(number=arr_number_questions).first()
    user.user_number_que = arr_number_questions

    message = f"‚ùì {question.text}\n\n"
    for button, ans in zip(config.BUTTON_ANS, question.answers):
        message += f"üî∏{button}. {ans}\n"

    buttons = button_makeup(list(config.BUTTON_ANS.keys()))

    bot.send_message(user.user_id,
                     message,
                     reply_markup=buttons
                     )

    user.user_status = "question"
    user.save()
    print(user.user_status)

@bot.callback_query_handler(lambda call: call.data == config.READY_BTN[0])
def query_handler_ready(call):
    """
        –í—ã—Å—ã–ª–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ç–µ–º,
        –∫—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å.
    """

    bot.answer_callback_query(call.id)
    student = User_stud.objects(user_id=call.message.chat.id).first()

    if student.user_status == "ready":
        send_questions(student)

@bot.callback_query_handler(lambda call: call.data in config.BUTTON_ANS)
def query_handler_questions(call):
    """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è inline-–∫–Ω–æ–ø–æ–∫ —Å –≤—ã–±–æ—Ä–æ–º –æ—Ç–≤–µ—Ç–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–º.
    """

    bot.answer_callback_query(call.id)
    user = User_stud.objects(user_id=call.message.chat.id).first()
    num = user.user_number_que
    question = Question.objects(number=num).first()

    if user.user_status == "question":

        user_answer = call.message.text.split("\n")[config.BUTTON_ANS[call.data]+1][4:]
        correct_answer = question.correct_answer

        print(user_answer)
        print(correct_answer)

        if user_answer == correct_answer:
            bot.send_message(call.message.chat.id, "–ü—Ä–∞–≤–∏–ª—å–Ω–æ üòÄ, —Ç–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üü¢")
        else:
            bot.send_message(call.message.chat.id, "–≠—Ö üòî, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ üî¥")

    if user.user_count_que == config.PORTION_QUE:
        user.user_status = "stop"
        user.user_count_que = 0
        user.user_number_que = 0
        user.save()
        bot.send_message(call.message.chat.id, "–°–µ–π—á–∞—Å –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç, —Å–ø–∞—Å–∏–±–æ," 
                                               " —á—Ç–æ –æ—Ç–≤–µ—Ç–∏–ª!")
    else:
        user.user_count_que += 1
        user.save()
        send_questions(user)

def send_single_conf(stud):
    """
        –í–æ–ø—Ä–æ—Å –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    mark_ = telebot.types.InlineKeyboardMarkup()
    mark_.add(telebot.types.InlineKeyboardButton(text=config.READY_BTN[0],
                                                 callback_data=config.READY_BTN[0]))
    mark_.add(telebot.types.InlineKeyboardButton(text=config.READY_BTN[1],
                                                 callback_data=config.READY_BTN[1]))

    bot.send_message(stud.user_id, text="üìÑ")
    bot.send_message(stud.user_id, config.START_EVERYDAY_MSG, reply_markup=mark_)

    return stud


@bot.callback_query_handler(lambda call: call.data in config.READY_BTN)
def call_question(call):
    """
        –í–æ–ø—Ä—Å—ã –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
    """
    bot.answer_callback_query(call.id, "")

    user = User_stud.objects(user_id=call.message.chat.id).first()

    if user.user_status == "ready":

        if call.data == config.READY_BTN[1]:
            message_end(user, call)


@bot.message_handler(commands=["help"])
def help_messages(message):
    """
        –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–º–æ—â–∏
    """
    keyboard = telebot.types.InlineKeyboardMarkup()

    button1 = telebot.types.InlineKeyboardButton(
        config.HELP_BUTTON,
        url='telegram.me/k_ira_18')
    keyboard.add(button1)

    bot.send_message(message.chat.id,
                     config.HELP_MESSAGE,
                     reply_markup=keyboard)


@bot.message_handler(commands=["info"])
def developers_messages(message):
    """
        –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
    """
    keyboard = telebot.types.InlineKeyboardMarkup()

    button1 = telebot.types.InlineKeyboardButton(
        config.HELP_BUTTON,
        url='telegram.me/k_ira_18')
    keyboard.add(button1)

    bot.send_message(message.chat.id,
                     config.INFO_MESSAGE,
                     reply_markup=keyboard)


@bot.message_handler(commands=["start"])
def start_registration(message):
    """
        –ó–∞–ø–∏—Å—å –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥
    """

    if not User_stud.objects(user_id=message.chat.id):
        msg = bot.send_message(message.chat.id, config.HELLO_MESSAGE)
        bot.register_next_step_handler(msg, name_ask)

    else:
        bot.send_message(message.chat.id, "–ê –º—ã —É–∂–µ –∑–Ω–∞–∫–æ–º—ã üòÑ")


def name_ask(message):
    """
        –ó–∞–ø–∏—Å—å –∏–º–µ–Ω–∏
    """
    
    if type(message.text) == str:
        user_name = message.text

        login = message.chat.username

        if message.chat.username is None:
            login = f"[{generate_r2d2()}](tg://user&id={str(message.chat.id)})"

        stud = User_stud(
            user_id=message.chat.id,
            user_login=login,
            user_name=user_name,
            user_status="stop",
            user_count_que=0,
            user_number_que=0
        )
        stud.save()

        bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç, " + user_name +
                                          "! –ú—ã –Ω–∞—á–∏–Ω–∞–µ–º –∏–∑—É—á–∞—Ç—å —Å–ª–æ–≤–∞," 
                                          " –º–æ–π –¥—Ä—É–≥!\n\n"
                                          "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 13:00 –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã" 
                                          " —Ç–∞–∫ —á—Ç–æ –±—É–¥—å –≥–æ—Ç–æ–≤! üìù")
    else:
        msg = bot.send_message(message.chat.id, "üòî –ü—Ä–æ—Å—Ç–∏, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é,"
                                                "–ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")
        bot.register_next_step_handler(msg, name_ask)

@bot.message_handler(commands=["question"])
def question_handler(message):
    if User_stud.objects(user_id=message.chat.id):
        stud = User_stud.objects(user_id=message.chat.id).first()
        print(message.chat.id, stud)
        stud.user_status = "ready"
        stud.save()
        send_single_conf(stud)


@bot.message_handler(content_types=["text"])
def repeat_all_messages(message):
    bot.send_message(message.chat.id, "üòî –Ø –Ω–µ –Ω–∞—É—á–∏–ª—Å—è –µ—â–µ –ø–æ–Ω–∏–º–∞—Ç—å —Ç–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è," 
                                      " –ø–æ—ç—Ç–æ–º—É –Ω–∞–ø–∏—à–∏ /info –∏–ª–∏ /help " 
                                      "–µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å, —á—Ç–æ –¥–µ–ª–∞—Ç—å, —è –ø–æ–º–æ–≥—É üòâ")


def schedule__():
    schedule.every().day.at("13:00").do(message_send_readiness)
    schedule.every().day.at("16:00").do(message_send_readiness)
    schedule.every().day.at("20:00").do(message_send_readiness)
    schedule.every().day.at("23:25").do(message_send_readiness)

    while True:
        schedule.run_pending()
        time.sleep(1)


if __name__ == "__main__":
    multiprocessing.Process(target=schedule__, args=()).start()
    bot.polling(none_stop=True, interval=0)
